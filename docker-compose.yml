# Docker Compose конфигурация для production
services:
  # Основной сервис бота
  telegram-bot:
    build: .
    container_name: telegram_antispam_bot
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:password@postgres:5432/telegram_bot
      - ENVIRONMENT=production
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    networks:
      - telegram_bot_network

  # База данных PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: telegram_bot_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: telegram_bot
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-change_this_password}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./monitoring/postgres/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./monitoring/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d telegram_bot"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - telegram_bot_network

  # Мониторинг с помощью Prometheus (опционально)
  prometheus:
    image: prom/prometheus:latest
    container_name: telegram_bot_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - telegram_bot_network

  # Grafana для визуализации метрик (опционально)
  grafana:
    image: grafana/grafana:latest
    container_name: telegram_bot_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - telegram_bot_network

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  telegram_bot_network:
    driver: bridge
