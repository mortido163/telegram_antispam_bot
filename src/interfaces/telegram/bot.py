import logging
from typing import Optional

from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message

from application.enhanced_config import EnhancedModerationConfig
from application.services.moderation_service import TelegramModerationService
from infrastructure.database.session import get_session_manager
from infrastructure.monitoring import metrics, time_it
from infrastructure.repositories import SQLAlchemyMessageRepository, SQLAlchemyUserRepository

from .handlers import ModeratorCommandHandlers

logger = logging.getLogger(__name__)


class ModerationBot:
    def __init__(self, token: str):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        self.bot = Bot(token=token, parse_mode=ParseMode.HTML)
        self.dp = Dispatcher()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
        self.user_repository = SQLAlchemyUserRepository()
        self.message_repository = SQLAlchemyMessageRepository()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.config = EnhancedModerationConfig()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        self.moderation_service = TelegramModerationService(
            user_repository=self.user_repository, message_repository=self.message_repository, config=self.config
        )

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.command_handlers = ModeratorCommandHandlers(
            moderation_service=self.moderation_service, user_repository=self.user_repository
        )

        self._register_handlers()
        logger.info("–ú–æ–¥–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.dp.message.register(self.command_handlers.handle_message)

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        self.dp.message.register(self.command_handlers.ban_command, Command("ban"))
        self.dp.message.register(self.command_handlers.unban_command, Command("unban"))
        self.dp.message.register(self.command_handlers.mute_command, Command("mute"))
        self.dp.message.register(self.command_handlers.unmute_command, Command("unmute"))
        self.dp.message.register(self.command_handlers.kick_command, Command("kick"))
        self.dp.message.register(self.command_handlers.set_warnings_limit_command, Command("set_warnings"))

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        self.dp.message.register(self.command_handlers.add_forbidden_word_command, Command("add_forbidden"))
        self.dp.message.register(self.command_handlers.remove_forbidden_word_command, Command("remove_forbidden"))
        self.dp.message.register(self.command_handlers.list_forbidden_words_command, Command("list_forbidden"))
        self.dp.message.register(self.command_handlers.clear_forbidden_words_command, Command("clear_forbidden"))

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.dp.message.register(self.command_handlers.bot_status_command, Command("bot_status"))
        self.dp.message.register(self.command_handlers.help_command, Command("help", "start"))
        self.dp.message.register(self.stats_command, Command("stats"))

    async def start(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"""
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        session_manager = get_session_manager()
        await session_manager.init_db()

        logger.info("–ó–∞–ø—É—Å–∫ polling –±–æ—Ç–∞...")
        await self.dp.start_polling(self.bot)

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞"""
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        await self.dp.stop_polling()
        await self.bot.session.close()

    @time_it
    async def stats_command(self, message: Message) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
        metrics.increment_commands_executed("stats")

        try:
            summary = metrics.get_metrics_summary()
            uptime_hours = summary["uptime_seconds"] / 3600

            stats_text = f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**

üïê –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime_hours:.1f} —á–∞—Å–æ–≤
üì® –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {summary['messages_processed']}
‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π: {summary['violations_detected']}
üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–±–∞–Ω–µ–Ω–æ: {summary['users_banned']}
üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≥–ª—É—à–µ–Ω–æ: {summary['users_muted']}
üë¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏—Å–∫–ª—é—á–µ–Ω–æ: {summary['users_kicked']}
‚ö° –í—ã–¥–∞–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {summary['warnings_issued']}
ü§ñ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∫–æ–º–∞–Ω–¥: {summary['commands_executed']}
‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {summary['average_response_time']:.3f}—Å
üíæ –û—à–∏–±–æ–∫ –ë–î: {summary['database_errors']}
üí¨ –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {summary['chat_count']}"""

            await message.reply(stats_text)
        except Exception as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
