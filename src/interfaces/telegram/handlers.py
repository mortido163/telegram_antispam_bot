from datetime import datetime
from typing import List, Optional

from aiogram import types
from aiogram.types import Message as TelegramMessage

from application.services.moderation_service import TelegramModerationService
from domain.entities.message import Message
from domain.entities.user import User
from domain.exceptions import UserAlreadyBannedError, UserAlreadyMutedError, UserNotBannedError, UserNotMutedError
from domain.interfaces.repositories import UserRepository

from .decorators import admin_only, chat_admin_only, owner_only


class ModeratorCommandHandlers:
    def __init__(self, moderation_service: TelegramModerationService, user_repository: UserRepository):
        self.moderation_service = moderation_service
        self.user_repository = user_repository

    async def handle_message(self, message: TelegramMessage) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Ç–∞"""
        if message.text:
            domain_message = Message(
                message_id=message.message_id,
                user_id=message.from_user.id,
                chat_id=message.chat.id,
                text=message.text,
                timestamp=datetime.utcnow(),
            )

            violations = await self.moderation_service.check_message(domain_message)
            if violations:
                await message.reply(
                    f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞: {', '.join(violations)}\n" f"–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ –∫–∞–∫ –Ω–∞—Ä—É—à–µ–Ω–∏–µ."
                )

    @chat_admin_only
    async def ban_command(self, message: TelegramMessage) -> None:
        """–ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ"""
        if not message.reply_to_message:
            await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return

        target_user = await self._get_target_user(message)
        if not target_user:
            return

        try:
            await self.moderation_service.ban_user(target_user)
            await message.bot.ban_chat_member(chat_id=message.chat.id, user_id=target_user.user_id)
            await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω")
        except UserAlreadyBannedError:
            await message.reply("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–∞–Ω–µ–Ω")

    @chat_admin_only
    async def unban_command(self, message: TelegramMessage) -> None:
        """–†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ"""
        if not message.reply_to_message:
            await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return

        target_user = await self._get_target_user(message)
        if not target_user:
            return

        try:
            await self.moderation_service.unban_user(target_user)
            await message.bot.unban_chat_member(chat_id=message.chat.id, user_id=target_user.user_id, only_if_banned=True)
            await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω")
        except UserNotBannedError:
            await message.reply("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–∞–Ω–µ–Ω")

    @chat_admin_only
    async def mute_command(self, message: TelegramMessage) -> None:
        """–û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not message.reply_to_message:
            await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return

        target_user = await self._get_target_user(message)
        if not target_user:
            return

        try:
            await self.moderation_service.mute_user(target_user)
            await message.bot.restrict_chat_member(
                chat_id=message.chat.id,
                user_id=target_user.user_id,
                permissions=types.ChatPermissions(can_send_messages=False),
            )
            await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥–ª—É—à–µ–Ω")
        except UserAlreadyMutedError:
            await message.reply("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–≥–ª—É—à–µ–Ω")

    @chat_admin_only
    async def unmute_command(self, message: TelegramMessage) -> None:
        """–†–∞–∑—Ä–µ—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not message.reply_to_message:
            await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return

        target_user = await self._get_target_user(message)
        if not target_user:
            return

        try:
            await self.moderation_service.unmute_user(target_user)
            await message.bot.restrict_chat_member(
                chat_id=message.chat.id, user_id=target_user.user_id, permissions=types.ChatPermissions(can_send_messages=True)
            )
            await message.reply(f"–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–Ω—è—Ç–æ –∑–∞–≥–ª—É—à–µ–Ω–∏–µ")
        except UserNotMutedError:
            await message.reply("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–≥–ª—É—à–µ–Ω")

    @chat_admin_only
    async def kick_command(self, message: TelegramMessage) -> None:
        """–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–∞—Ç–∞"""
        if not message.reply_to_message:
            await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return

        target_user = await self._get_target_user(message)
        if not target_user:
            return

        await self.moderation_service.kick_user(target_user)
        await message.bot.ban_chat_member(chat_id=message.chat.id, user_id=target_user.user_id)
        await message.bot.unban_chat_member(chat_id=message.chat.id, user_id=target_user.user_id)
        await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ —á–∞—Ç–∞")

    @admin_only
    async def set_warnings_limit_command(self, message: TelegramMessage) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞"""
        args = message.text.split()
        if len(args) != 2 or not args[1].isdigit():
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ª–∏–º–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞\n" "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_warnings 3")
            return

        limit = int(args[1])
        if limit < 1:
            await message.reply("–õ–∏–º–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
            return

        await self.moderation_service.set_warnings_limit(message.chat.id, limit)
        await message.reply(f"–õ–∏–º–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {limit}")

    @admin_only
    async def add_forbidden_word_command(self, message: TelegramMessage) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ"""
        args = message.text.split(maxsplit=1)
        if len(args) != 2:
            await message.reply(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö\n" "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_forbidden —Å–ª–æ–≤–æ"
            )
            return

        word = args[1].strip()
        if not word:
            await message.reply("–°–ª–æ–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return

        await self.moderation_service.add_forbidden_word(word)
        await message.reply(f"–°–ª–æ–≤–æ '{word}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö")

    @admin_only
    async def remove_forbidden_word_command(self, message: TelegramMessage) -> None:
        """–£–¥–∞–ª–∏—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ"""
        args = message.text.split(maxsplit=1)
        if len(args) != 2:
            await message.reply(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö\n" "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_forbidden —Å–ª–æ–≤–æ"
            )
            return

        word = args[1].strip()
        if not word:
            await message.reply("–°–ª–æ–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return

        success = await self.moderation_service.remove_forbidden_word(word)
        if success:
            await message.reply(f"–°–ª–æ–≤–æ '{word}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö")
        else:
            await message.reply(f"–°–ª–æ–≤–æ '{word}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö")

    @admin_only
    async def list_forbidden_words_command(self, message: TelegramMessage) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤"""
        words = await self.moderation_service.get_forbidden_words()
        if not words:
            await message.reply("–°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –ø—É—Å—Ç")
            return

        words_text = "\n".join([f"‚Ä¢ {word}" for word in words])
        await message.reply(f"üìù –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞:\n{words_text}")

    @owner_only
    async def clear_forbidden_words_command(self, message: TelegramMessage) -> None:
        """–û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)"""
        await self.moderation_service.clear_forbidden_words()
        await message.reply("üóëÔ∏è –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –æ—á–∏—â–µ–Ω")

    @admin_only
    async def bot_status_command(self, message: TelegramMessage) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        from application.settings import get_config

        from .decorators import get_user_role

        config = get_config()
        user_role = get_user_role(message.from_user.id)
        warnings_limit = await self.moderation_service.get_warnings_limit(message.chat.id)
        forbidden_count = len(await self.moderation_service.get_forbidden_words())

        status_text = (
            f"ü§ñ **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞**\n\n"
            f"üë§ –í–∞—à–∞ —Ä–æ–ª—å: {user_role}\n"
            f"‚ö†Ô∏è –õ–∏–º–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warnings_limit}\n"
            f"üö´ –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤: {forbidden_count}\n"
            f"üè∑Ô∏è –í–µ—Ä—Å–∏—è: {config.environment}"
        )

        await message.reply(status_text, parse_mode="Markdown")

    async def help_command(self, message: TelegramMessage) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
        from .decorators import get_user_role

        user_role = get_user_role(message.from_user.id)

        help_text = "ü§ñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º**\n\n"

        if user_role in ["owner", "admin"]:
            help_text += (
                "**–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**\n"
                "/add_forbidden <—Å–ª–æ–≤–æ> - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ\n"
                "/remove_forbidden <—Å–ª–æ–≤–æ> - —É–¥–∞–ª–∏—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ\n"
                "/list_forbidden - –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞\n"
                "/set_warnings <—á–∏—Å–ª–æ> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π\n"
                "/bot_status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n\n"
            )

        if user_role == "owner":
            help_text += "**–ö–æ–º–∞–Ω–¥—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞:**\n" "/clear_forbidden - –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞\n\n"

        help_text += (
            "**–ö–æ–º–∞–Ω–¥—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤ —á–∞—Ç–∞):**\n"
            "/ban - –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n"
            "/unban - —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "/mute - –∑–∞–≥–ª—É—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "/unmute - —Å–Ω—è—Ç—å –∑–∞–≥–ª—É—à–µ–Ω–∏–µ\n"
            "/kick - –∏—Å–∫–ª—é—á–∏—Ç—å –∏–∑ —á–∞—Ç–∞\n\n"
            "**–û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
            "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
        )

        await message.reply(help_text, parse_mode="Markdown")

    async def _get_target_user(self, message: TelegramMessage) -> Optional[User]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—Ç–≤–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not message.reply_to_message or not message.reply_to_message.from_user:
            await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return None

        target_id = message.reply_to_message.from_user.id

        # –ù–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
        if target_id == message.bot.id:
            await message.reply("–Ø –Ω–µ –º–æ–≥—É –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º —Å–µ–±—è")
            return None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user = await self.user_repository.get_by_id(target_id, message.chat.id)
        if not user:
            user = User(target_id, message.chat.id)

        return user
