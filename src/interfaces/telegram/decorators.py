"""
–î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞
"""
from functools import wraps
from typing import Callable, List, Union

from aiogram.types import Message as TelegramMessage

from application.settings import get_config


def owner_only(func: Callable) -> Callable:
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞
    """

    @wraps(func)
    async def wrapper(self, message: TelegramMessage, *args, **kwargs):
        user_id = message.from_user.id
        config = get_config()

        if user_id != config.auth.owner_id:
            await message.reply("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞.")
            return

        return await func(self, message, *args, **kwargs)

    return wrapper


def admin_only(func: Callable) -> Callable:
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    """

    @wraps(func)
    async def wrapper(self, message: TelegramMessage, *args, **kwargs):
        user_id = message.from_user.id
        config = get_config()

        # –í–ª–∞–¥–µ–ª–µ—Ü –∏–º–µ–µ—Ç –≤—Å–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if user_id == config.auth.owner_id:
            return await func(self, message, *args, **kwargs)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if user_id not in config.auth.admin_ids:
            await message.reply("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –±–æ—Ç–∞.")
            return

        return await func(self, message, *args, **kwargs)

    return wrapper


def chat_admin_only(func: Callable) -> Callable:
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –±–æ—Ç–∞ –∏ –≤–ª–∞–¥–µ–ª—å—Ü—É
    """

    @wraps(func)
    async def wrapper(self, message: TelegramMessage, *args, **kwargs):
        user_id = message.from_user.id
        config = get_config()

        # –í–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ –≤—Å–µ–≥–¥–∞ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø
        if user_id == config.auth.owner_id:
            return await func(self, message, *args, **kwargs)

        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –±–æ—Ç–∞ —Ç–∞–∫–∂–µ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø
        if user_id in config.auth.admin_ids:
            return await func(self, message, *args, **kwargs)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –≤ —á–∞—Ç–µ
        try:
            chat_member = await message.bot.get_chat_member(chat_id=message.chat.id, user_id=user_id)

            if chat_member.status in ["administrator", "creator"]:
                return await func(self, message, *args, **kwargs)
            else:
                await message.reply("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞.")
                return

        except Exception as e:
            await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –≤ —á–∞—Ç–µ.")
            return

    return wrapper


async def is_user_authorized(user_id: int, required_level: str = "admin", chat_id: int = None, bot=None) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        required_level: –¢—Ä–µ–±—É–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ ('owner', 'admin', 'chat_admin')
        chat_id: ID —á–∞—Ç–∞ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–∞—Ç–∞)
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –≤ —á–∞—Ç–µ)

    Returns:
        True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    config = get_config()

    # –í–ª–∞–¥–µ–ª–µ—Ü –≤—Å–µ–≥–¥–∞ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø
    if user_id == config.auth.owner_id:
        return True

    if required_level == "owner":
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–æ—Ç–∞
    if user_id in config.auth.admin_ids:
        return True

    if required_level == "admin":
        return False

    # –î–ª—è chat_admin –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –≤ —á–∞—Ç–µ
    if required_level == "chat_admin" and chat_id and bot:
        try:
            chat_member = await bot.get_chat_member(chat_id=chat_id, user_id=user_id)
            return chat_member.status in ["administrator", "creator"]
        except Exception:
            return False

    return False


def get_user_role(user_id: int) -> str:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: 'owner', 'admin', 'user'
    """
    config = get_config()

    if user_id == config.auth.owner_id:
        return "owner"
    elif user_id in config.auth.admin_ids:
        return "admin"
    else:
        return "user"


def require_role(required_role: str, unauthorized_message: str = None) -> Callable:
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Args:
        required_role: –¢—Ä–µ–±—É–µ–º–∞—è —Ä–æ–ª—å ('owner', 'admin', 'user')
        unauthorized_message: –ö–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    """

    def decorator(func: Callable) -> Callable:
        @wraps(func)
        async def wrapper(message: TelegramMessage, *args, **kwargs):
            user_id = message.from_user.id
            user_role = get_user_role(user_id)

            # –í–ª–∞–¥–µ–ª–µ—Ü –∏–º–µ–µ—Ç –≤—Å–µ —Ä–æ–ª–∏
            if user_role == "owner":
                return await func(message, *args, **kwargs)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–æ–ª–∏
            if required_role == "admin" and user_role in ["admin"]:
                return await func(message, *args, **kwargs)
            elif required_role == "user":
                return await func(message, *args, **kwargs)

            # –û—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ
            error_msg = unauthorized_message or f"üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–æ–ª–∏: {required_role}"
            await message.reply(error_msg)
            return

        return wrapper

    return decorator


def admin_required(func: Callable) -> Callable:
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º (–≤–∫–ª—é—á–∞—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)"""
    return require_role("admin")(func)


def owner_required(func: Callable) -> Callable:
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É"""
    return owner_only(func)
