name: CI Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

env:
  # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
  BOT_TOKEN: "test_token_for_ci"
  OWNER_ID: "123456789"
  ADMIN_IDS: "123456789,987654321"
  DATABASE_URL: "sqlite:///test.db"
  ENVIRONMENT: "test"
  DEBUG: "true"

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-asyncio pytest-mock
        
    - name: Create test database directory
      run: |
        mkdir -p test_data
        
    - name: Run linting with flake8
      run: |
        pip install flake8
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –∏ –±–∞–∑–æ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª
        flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (–Ω–µ –±–ª–æ–∫–∏—Ä—É—é—Ç CI)
        flake8 src tests --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics || true
        
    - name: Run type checking with mypy
      run: |
        pip install mypy types-python-dateutil
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç CI –µ—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏)
        mypy src --ignore-missing-imports --no-strict-optional || true
        
    - name: Run tests with pytest
      run: |
        python -m pytest tests/ \
          --cov=src \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --cov-fail-under=80 \
          --verbose \
          --tb=short
          
    - name: Upload to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Upload coverage reports as artifact
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: htmlcov/
        
    - name: Check test results
      run: |
        echo "‚úÖ All tests passed successfully!"
        echo "üìä Coverage report generated"
        
  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
        
    - name: Install security scanning tools
      run: |
        pip install bandit safety
        
    - name: Run security scan with bandit
      run: |
        bandit -r src -f json -o bandit-report.json || true
        bandit -r src
        
    - name: Check dependencies for vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
        safety check
        
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          
  build-validation:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Validate project structure
      run: |
        echo "Checking project structure..."
        test -d src || { echo "‚ùå src directory missing"; exit 1; }
        test -d tests || { echo "‚ùå tests directory missing"; exit 1; }
        test -f requirements.txt || { echo "‚ùå requirements.txt missing"; exit 1; }
        test -f src/main.py || { echo "‚ùå main.py missing"; exit 1; }
        echo "‚úÖ Project structure is valid"
        
    - name: Check import structure
      run: |
        python -c "
        try:
            from src.main import main
            from src.application.settings import get_config
            from src.interfaces.telegram.bot import ModerationBot
            print('‚úÖ All main imports work correctly')
        except ImportError as e:
            print(f'‚ùå Import error: {e}')
            exit(1)
        "
        
    - name: Validate configuration
      run: |
        python -c "
        import os
        os.environ['BOT_TOKEN'] = 'test'
        os.environ['OWNER_ID'] = '123'
        try:
            from src.application.settings import get_config
            config = get_config()
            print(f'‚úÖ Configuration loaded successfully')
            print(f'Environment: {config.environment}')
        except Exception as e:
            print(f'‚ùå Configuration error: {e}')
            exit(1)
        "

  notify-status:
    runs-on: ubuntu-latest
    needs: [test, security-scan, build-validation]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.test.result == 'success' && needs.security-scan.result == 'success' && needs.build-validation.result == 'success' }}
      run: |
        echo "üéâ All CI checks passed successfully!"
        echo "‚úÖ Tests: Passed"
        echo "‚úÖ Security: Passed" 
        echo "‚úÖ Build: Passed"
        
    - name: Notify failure
      if: ${{ needs.test.result == 'failure' || needs.security-scan.result == 'failure' || needs.build-validation.result == 'failure' }}
      run: |
        echo "‚ùå CI Pipeline failed!"
        echo "Tests: ${{ needs.test.result }}"
        echo "Security: ${{ needs.security-scan.result }}"
        echo "Build: ${{ needs.build-validation.result }}"
        exit 1
