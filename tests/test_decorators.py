"""
–¢–µ—Å—Ç—ã –¥–ª—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
"""
from unittest.mock import AsyncMock, Mock, patch

import pytest

from interfaces.telegram.decorators import (
    admin_only,
    admin_required,
    chat_admin_only,
    get_user_role,
    is_user_authorized,
    owner_only,
    owner_required,
    require_role,
)


class TestAuthorizationDecorators:
    """–¢–µ—Å—Ç—ã –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""

    @pytest.fixture
    def mock_message(self):
        """–ú–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram"""
        message = Mock()
        message.from_user = Mock()
        message.from_user.id = 123456789
        message.chat = Mock()
        message.chat.id = -100123456789
        message.reply = AsyncMock()
        message.bot = Mock()
        message.bot.get_chat_member = AsyncMock()
        return message

    @pytest.fixture
    def mock_config(self):
        """–ú–æ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        config = Mock()
        config.auth = Mock()
        config.auth.owner_id = 999888777
        config.auth.admin_ids = [111222333, 444555666]
        return config

    @pytest.fixture
    def mock_handler_self(self):
        """–ú–æ–∫ self –¥–ª—è –º–µ—Ç–æ–¥–æ–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        return Mock()

    @pytest.mark.asyncio
    async def test_owner_only_success(self, mock_message, mock_config, mock_handler_self):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞"""
        mock_message.from_user.id = 999888777  # owner

        @owner_only
        async def test_handler(self, message):
            return "owner_success"

        with patch("interfaces.telegram.decorators.get_config", return_value=mock_config):
            result = await test_handler(mock_handler_self, mock_message)
            assert result == "owner_success"

    @pytest.mark.asyncio
    async def test_owner_only_unauthorized(self, mock_message, mock_config, mock_handler_self):
        """–¢–µ—Å—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞"""
        mock_message.from_user.id = 123456789  # user

        @owner_only
        async def test_handler(self, message):
            return "owner_success"

        with patch("interfaces.telegram.decorators.get_config", return_value=mock_config):
            result = await test_handler(mock_handler_self, mock_message)
            assert result is None

            mock_message.reply.assert_called_once_with("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞.")

    @pytest.mark.asyncio
    async def test_admin_only_owner_success(self, mock_message, mock_config, mock_handler_self):
        """–¢–µ—Å—Ç —á—Ç–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        mock_message.from_user.id = 999888777  # owner

        @admin_only
        async def test_handler(self, message):
            return "admin_success"

        with patch("interfaces.telegram.decorators.get_config", return_value=mock_config):
            result = await test_handler(mock_handler_self, mock_message)
            assert result == "admin_success"

    @pytest.mark.asyncio
    async def test_admin_only_admin_success(self, mock_message, mock_config, mock_handler_self):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        mock_message.from_user.id = 111222333  # admin

        @admin_only
        async def test_handler(self, message):
            return "admin_success"

        with patch("interfaces.telegram.decorators.get_config", return_value=mock_config):
            result = await test_handler(mock_handler_self, mock_message)
            assert result == "admin_success"

    @pytest.mark.asyncio
    async def test_admin_only_unauthorized(self, mock_message, mock_config, mock_handler_self):
        """–¢–µ—Å—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        mock_message.from_user.id = 123456789  # user

        @admin_only
        async def test_handler(self, message):
            return "admin_success"

        with patch("interfaces.telegram.decorators.get_config", return_value=mock_config):
            result = await test_handler(mock_handler_self, mock_message)
            assert result is None

            mock_message.reply.assert_called_once_with("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –±–æ—Ç–∞.")

    @pytest.mark.asyncio
    async def test_chat_admin_only_owner_success(self, mock_message, mock_config, mock_handler_self):
        """–¢–µ—Å—Ç —á—Ç–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–∞—Ç–∞"""
        mock_message.from_user.id = 999888777  # owner

        @chat_admin_only
        async def test_handler(self, message):
            return "chat_admin_success"

        with patch("interfaces.telegram.decorators.get_config", return_value=mock_config):
            result = await test_handler(mock_handler_self, mock_message)
            assert result == "chat_admin_success"

    @pytest.mark.asyncio
    async def test_chat_admin_only_bot_admin_success(self, mock_message, mock_config, mock_handler_self):
        """–¢–µ—Å—Ç —á—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±–æ—Ç–∞ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–∞—Ç–∞"""
        mock_message.from_user.id = 111222333  # admin

        @chat_admin_only
        async def test_handler(self, message):
            return "chat_admin_success"

        with patch("interfaces.telegram.decorators.get_config", return_value=mock_config):
            result = await test_handler(mock_handler_self, mock_message)
            assert result == "chat_admin_success"

    @pytest.mark.asyncio
    async def test_chat_admin_only_chat_admin_success(self, mock_message, mock_config, mock_handler_self):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–∞—Ç–∞"""
        mock_message.from_user.id = 123456789  # user

        # –ú–æ–∫–∞–µ–º –æ—Ç–≤–µ—Ç get_chat_member
        chat_member = Mock()
        chat_member.status = "administrator"
        mock_message.bot.get_chat_member.return_value = chat_member

        @chat_admin_only
        async def test_handler(self, message):
            return "chat_admin_success"

        with patch("interfaces.telegram.decorators.get_config", return_value=mock_config):
            result = await test_handler(mock_handler_self, mock_message)
            assert result == "chat_admin_success"

    @pytest.mark.asyncio
    async def test_chat_admin_only_chat_creator_success(self, mock_message, mock_config, mock_handler_self):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è —á–∞—Ç–∞"""
        mock_message.from_user.id = 123456789  # user

        # –ú–æ–∫–∞–µ–º –æ—Ç–≤–µ—Ç get_chat_member
        chat_member = Mock()
        chat_member.status = "creator"
        mock_message.bot.get_chat_member.return_value = chat_member

        @chat_admin_only
        async def test_handler(self, message):
            return "chat_admin_success"

        with patch("interfaces.telegram.decorators.get_config", return_value=mock_config):
            result = await test_handler(mock_handler_self, mock_message)
            assert result == "chat_admin_success"

    @pytest.mark.asyncio
    async def test_chat_admin_only_unauthorized(self, mock_message, mock_config, mock_handler_self):
        """–¢–µ—Å—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–∞—Ç–∞"""
        mock_message.from_user.id = 123456789  # user

        # –ú–æ–∫–∞–µ–º –æ—Ç–≤–µ—Ç get_chat_member
        chat_member = Mock()
        chat_member.status = "member"
        mock_message.bot.get_chat_member.return_value = chat_member

        @chat_admin_only
        async def test_handler(self, message):
            return "chat_admin_success"

        with patch("interfaces.telegram.decorators.get_config", return_value=mock_config):
            result = await test_handler(mock_handler_self, mock_message)
            assert result is None

            mock_message.reply.assert_called_once_with("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞.")

    @pytest.mark.asyncio
    async def test_chat_admin_only_get_chat_member_exception(self, mock_message, mock_config, mock_handler_self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –≤ —á–∞—Ç–µ"""
        mock_message.from_user.id = 123456789  # user

        # –ú–æ–∫–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ get_chat_member
        mock_message.bot.get_chat_member.side_effect = Exception("API Error")

        @chat_admin_only
        async def test_handler(self, message):
            return "chat_admin_success"

        with patch("interfaces.telegram.decorators.get_config", return_value=mock_config):
            result = await test_handler(mock_handler_self, mock_message)
            assert result is None

            mock_message.reply.assert_called_once_with("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –≤ —á–∞—Ç–µ.")

    def test_get_user_role_owner(self, mock_config):
        """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞"""
        with patch("interfaces.telegram.decorators.get_config", return_value=mock_config):
            role = get_user_role(999888777)
            assert role == "owner"

    def test_get_user_role_admin(self, mock_config):
        """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        with patch("interfaces.telegram.decorators.get_config", return_value=mock_config):
            role = get_user_role(111222333)
            assert role == "admin"

    def test_get_user_role_user(self, mock_config):
        """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–∏ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with patch("interfaces.telegram.decorators.get_config", return_value=mock_config):
            role = get_user_role(123456789)
            assert role == "user"

    @pytest.mark.asyncio
    async def test_is_user_authorized_owner(self, mock_config):
        """–¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –¥–ª—è –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π"""
        with patch("interfaces.telegram.decorators.get_config", return_value=mock_config):
            assert await is_user_authorized(999888777, "owner") == True
            assert await is_user_authorized(999888777, "admin") == True
            assert await is_user_authorized(999888777, "chat_admin") == True

    @pytest.mark.asyncio
    async def test_is_user_authorized_admin(self, mock_config):
        """–¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        with patch("interfaces.telegram.decorators.get_config", return_value=mock_config):
            assert await is_user_authorized(111222333, "owner") == False
            assert await is_user_authorized(111222333, "admin") == True
            assert await is_user_authorized(111222333, "chat_admin") == True

    @pytest.mark.asyncio
    async def test_is_user_authorized_user(self, mock_config):
        """–¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with patch("interfaces.telegram.decorators.get_config", return_value=mock_config):
            assert await is_user_authorized(123456789, "owner") == False
            assert await is_user_authorized(123456789, "admin") == False

    @pytest.mark.asyncio
    async def test_is_user_authorized_chat_admin_success(self, mock_config):
        """–¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–∞—Ç–∞"""
        mock_bot = Mock()
        chat_member = Mock()
        chat_member.status = "administrator"
        mock_bot.get_chat_member = AsyncMock(return_value=chat_member)

        with patch("interfaces.telegram.decorators.get_config", return_value=mock_config):
            result = await is_user_authorized(123456789, "chat_admin", -100123456789, mock_bot)
            assert result == True

    @pytest.mark.asyncio
    async def test_is_user_authorized_chat_admin_creator(self, mock_config):
        """–¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è —á–∞—Ç–∞"""
        mock_bot = Mock()
        chat_member = Mock()
        chat_member.status = "creator"
        mock_bot.get_chat_member = AsyncMock(return_value=chat_member)

        with patch("interfaces.telegram.decorators.get_config", return_value=mock_config):
            result = await is_user_authorized(123456789, "chat_admin", -100123456789, mock_bot)
            assert result == True

    @pytest.mark.asyncio
    async def test_is_user_authorized_chat_admin_member(self, mock_config):
        """–¢–µ—Å—Ç –æ—Ç–∫–∞–∑–∞ –æ–±—ã—á–Ω–æ–º—É —á–ª–µ–Ω—É —á–∞—Ç–∞"""
        mock_bot = Mock()
        chat_member = Mock()
        chat_member.status = "member"
        mock_bot.get_chat_member = AsyncMock(return_value=chat_member)

        with patch("interfaces.telegram.decorators.get_config", return_value=mock_config):
            result = await is_user_authorized(123456789, "chat_admin", -100123456789, mock_bot)
            assert result == False

    @pytest.mark.asyncio
    async def test_is_user_authorized_chat_admin_exception(self, mock_config):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –≤ —á–∞—Ç–µ"""
        mock_bot = Mock()
        mock_bot.get_chat_member = AsyncMock(side_effect=Exception("API Error"))

        with patch("interfaces.telegram.decorators.get_config", return_value=mock_config):
            result = await is_user_authorized(123456789, "chat_admin", -100123456789, mock_bot)
            assert result == False

    @pytest.mark.asyncio
    async def test_is_user_authorized_without_chat_id_and_bot(self, mock_config):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ chat_admin –±–µ–∑ chat_id –∏ bot"""
        with patch("interfaces.telegram.decorators.get_config", return_value=mock_config):
            # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ –ø—Ä–∞–≤–∞ chat_admin, –Ω–æ –±–µ–∑ chat_id –∏ bot
            result = await is_user_authorized(123456789, "chat_admin")
            assert result == False

    @pytest.mark.asyncio
    async def test_require_role_user_success(self, mock_message, mock_config):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        mock_message.from_user.id = 123456789  # user

        @require_role("user")
        async def test_handler(message):
            return "user_success"

        with patch("interfaces.telegram.decorators.get_config", return_value=mock_config):
            result = await test_handler(mock_message)
            assert result == "user_success"

    @pytest.mark.asyncio
    async def test_require_role_admin_success(self, mock_message, mock_config):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        mock_message.from_user.id = 111222333  # admin

        @require_role("admin")
        async def test_handler(message):
            return "admin_success"

        with patch("interfaces.telegram.decorators.get_config", return_value=mock_config):
            result = await test_handler(mock_message)
            assert result == "admin_success"

    @pytest.mark.asyncio
    async def test_require_role_owner_can_access_admin(self, mock_message, mock_config):
        """–¢–µ—Å—Ç —á—Ç–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        mock_message.from_user.id = 999888777  # owner

        @require_role("admin")
        async def test_handler(message):
            return "admin_success"

        with patch("interfaces.telegram.decorators.get_config", return_value=mock_config):
            result = await test_handler(mock_message)
            assert result == "admin_success"

    @pytest.mark.asyncio
    async def test_require_role_unauthorized(self, mock_message, mock_config):
        """–¢–µ—Å—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"""
        mock_message.from_user.id = 123456789  # user

        @require_role("admin")
        async def test_handler(message):
            return "admin_success"

        with patch("interfaces.telegram.decorators.get_config", return_value=mock_config):
            result = await test_handler(mock_message)
            assert result is None

            mock_message.reply.assert_called_once_with("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–æ–ª–∏: admin")

    @pytest.mark.asyncio
    async def test_require_role_with_custom_message(self, mock_message, mock_config):
        """–¢–µ—Å—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        mock_message.from_user.id = 123456789  # user

        @require_role("admin", unauthorized_message="–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
        async def test_handler(message):
            return "admin_success"

        with patch("interfaces.telegram.decorators.get_config", return_value=mock_config):
            result = await test_handler(mock_message)
            assert result is None

            mock_message.reply.assert_called_once_with("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")

    @pytest.mark.asyncio
    async def test_admin_required_success(self, mock_message, mock_config):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        mock_message.from_user.id = 111222333  # admin

        @admin_required
        async def test_handler(message):
            return "admin_success"

        with patch("interfaces.telegram.decorators.get_config", return_value=mock_config):
            result = await test_handler(mock_message)
            assert result == "admin_success"

    @pytest.mark.asyncio
    async def test_admin_required_unauthorized(self, mock_message, mock_config):
        """–¢–µ—Å—Ç –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        mock_message.from_user.id = 123456789  # user

        @admin_required
        async def test_handler(message):
            return "admin_success"

        with patch("interfaces.telegram.decorators.get_config", return_value=mock_config):
            result = await test_handler(mock_message)
            assert result is None

            mock_message.reply.assert_called_once_with("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–æ–ª–∏: admin")

    @pytest.mark.asyncio
    async def test_owner_required_success(self, mock_message, mock_config, mock_handler_self):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –≤–ª–∞–¥–µ–ª—å—Ü–∞"""
        mock_message.from_user.id = 999888777  # owner

        @owner_required
        async def test_handler(self, message):
            return "owner_success"

        with patch("interfaces.telegram.decorators.get_config", return_value=mock_config):
            result = await test_handler(mock_handler_self, mock_message)
            assert result == "owner_success"

    @pytest.mark.asyncio
    async def test_owner_required_admin_unauthorized(self, mock_message, mock_config, mock_handler_self):
        """–¢–µ—Å—Ç —á—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞"""
        mock_message.from_user.id = 111222333  # admin

        @owner_required
        async def test_handler(self, message):
            return "owner_success"

        with patch("interfaces.telegram.decorators.get_config", return_value=mock_config):
            result = await test_handler(mock_handler_self, mock_message)
            assert result is None

            mock_message.reply.assert_called_once_with("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞.")


if __name__ == "__main__":
    pytest.main([__file__])
