"""
–û–±—â–∏–µ —Ñ–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤
"""
import os
import sys
from datetime import datetime
from unittest.mock import AsyncMock, Mock, patch

import asyncio
import pytest
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.join(os.path.dirname(__file__), "..", "src"))

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(os.path.join(os.path.dirname(__file__), "..", ".env.test"))


@pytest.fixture(scope="session")
def event_loop():
    """–°–æ–∑–¥–∞–Ω–∏–µ event loop –¥–ª—è –≤—Å–µ–π —Å–µ—Å—Å–∏–∏ —Ç–µ—Å—Ç–æ–≤"""
    try:
        loop = asyncio.get_running_loop()
    except RuntimeError:
        loop = asyncio.new_event_loop()
    yield loop
    loop.close()


@pytest.fixture
def mock_config():
    """–ë–∞–∑–æ–≤–∞—è –º–æ–∫-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    config = Mock()

    # Database config
    config.database = Mock()
    config.database.url = "sqlite:///:memory:"
    config.database.echo = False
    config.database.pool_size = 5
    config.database.max_overflow = 10

    # Telegram config
    config.telegram = Mock()
    config.telegram.bot_token = "123456:TEST_BOT_TOKEN"
    config.telegram.webhook_url = "https://example.com/webhook"
    config.telegram.webhook_path = "/webhook"
    config.telegram.host = "0.0.0.0"
    config.telegram.port = 8080
    config.telegram.owner_id = 999888777
    config.telegram.admin_ids = [111222333, 444555666]

    # Authorization config
    config.authorization = Mock()
    config.authorization.owner_id = 999888777
    config.authorization.admin_ids = [111222333, 444555666]
    config.authorization.moderator_ids = [777888999]

    # Moderation config
    config.moderation = Mock()
    config.moderation.warnings_limit = 3
    config.moderation.auto_ban_enabled = True
    config.moderation.auto_mute_enabled = True
    config.moderation.spam_detection_enabled = True

    return config


@pytest.fixture
def mock_database_session():
    """–ú–æ–∫ —Å–µ—Å—Å–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    session = AsyncMock()
    session.add = Mock()
    session.commit = AsyncMock()
    session.rollback = AsyncMock()
    session.refresh = AsyncMock()
    session.close = AsyncMock()
    session.execute = AsyncMock()
    session.scalar = AsyncMock()
    session.scalars = AsyncMock()
    return session


@pytest.fixture
def mock_user_repository():
    """–ú–æ–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    repo = AsyncMock()
    repo.get_by_id = AsyncMock()
    repo.get_by_user_and_chat = AsyncMock()
    repo.create = AsyncMock()
    repo.update = AsyncMock()
    repo.delete = AsyncMock()
    repo.get_all_in_chat = AsyncMock()
    return repo


@pytest.fixture
def mock_message_repository():
    """–ú–æ–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    repo = AsyncMock()
    repo.create = AsyncMock()
    repo.get_by_id = AsyncMock()
    repo.get_recent_by_user = AsyncMock()
    repo.get_by_chat = AsyncMock()
    repo.delete_old = AsyncMock()
    return repo


@pytest.fixture
def mock_moderation_service():
    """–ú–æ–∫ —Å–µ—Ä–≤–∏—Å–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    service = AsyncMock()
    service.check_message = AsyncMock(return_value=[])
    service.ban_user = AsyncMock()
    service.unban_user = AsyncMock()
    service.mute_user = AsyncMock()
    service.unmute_user = AsyncMock()
    service.kick_user = AsyncMock()
    service.warn_user = AsyncMock()
    service.clear_warnings = AsyncMock()
    service.set_warnings_limit = AsyncMock()
    service.get_warnings_limit = AsyncMock(return_value=3)
    service.add_forbidden_word = AsyncMock()
    service.remove_forbidden_word = AsyncMock(return_value=True)
    service.get_forbidden_words = AsyncMock(return_value=[])
    service.clear_forbidden_words = AsyncMock()
    return service


@pytest.fixture
def sample_user():
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–∑—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    from domain.entities.user import User

    return User(
        user_id=123456789, chat_id=-100123456789, warnings=0, is_banned=False, is_muted=False, created_at=datetime.now()
    )


@pytest.fixture
def sample_message():
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞–∑—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    from domain.entities.message import Message

    return Message(message_id=100, user_id=123456789, chat_id=-100123456789, text="Test message", timestamp=datetime.now())


@pytest.fixture
def mock_telegram_message():
    """–ú–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram"""
    from aiogram.types import Chat as TelegramChat
    from aiogram.types import Message as TelegramMessage
    from aiogram.types import User as TelegramUser

    message = Mock(spec=TelegramMessage)
    message.message_id = 123
    message.text = "test message"
    message.date = datetime.now()

    # Mock user
    message.from_user = Mock(spec=TelegramUser)
    message.from_user.id = 123456789
    message.from_user.username = "testuser"
    message.from_user.first_name = "Test"
    message.from_user.last_name = "User"
    message.from_user.is_bot = False

    # Mock chat
    message.chat = Mock(spec=TelegramChat)
    message.chat.id = -100123456789
    message.chat.type = "supergroup"
    message.chat.title = "Test Group"

    # Mock bot
    message.bot = Mock()
    message.bot.id = 999999999
    message.bot.ban_chat_member = AsyncMock()
    message.bot.unban_chat_member = AsyncMock()
    message.bot.restrict_chat_member = AsyncMock()
    message.bot.send_message = AsyncMock()

    # Mock methods
    message.reply = AsyncMock()
    message.answer = AsyncMock()
    message.delete = AsyncMock()
    message.forward = AsyncMock()

    return message


@pytest.fixture
def mock_telegram_bot():
    """–ú–æ–∫ Telegram –±–æ—Ç–∞"""
    bot = Mock()
    bot.id = 999999999
    bot.username = "test_bot"
    bot.first_name = "Test Bot"

    # API methods
    bot.get_me = AsyncMock()
    bot.send_message = AsyncMock()
    bot.ban_chat_member = AsyncMock()
    bot.unban_chat_member = AsyncMock()
    bot.restrict_chat_member = AsyncMock()
    bot.get_chat_member = AsyncMock()
    bot.set_webhook = AsyncMock()
    bot.delete_webhook = AsyncMock()
    bot.get_webhook_info = AsyncMock()
    bot.close = AsyncMock()

    return bot


@pytest.fixture
def mock_dispatcher():
    """–ú–æ–∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ aiogram"""
    dp = Mock()
    dp.message_handler = Mock()
    dp.callback_query_handler = Mock()
    dp.inline_handler = Mock()
    dp.register_message_handler = Mock()
    dp.register_callback_query_handler = Mock()
    return dp


@pytest.fixture(autouse=True)
def mock_environment_variables():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    env_vars = {
        "BOT_TOKEN": "123456:TEST_BOT_TOKEN",
        "DATABASE_URL": "sqlite:///:memory:",
        "OWNER_ID": "999888777",
        "ADMIN_IDS": "111222333,444555666",
        "WEBHOOK_URL": "https://example.com/webhook",
        "WEBHOOK_PATH": "/webhook",
        "HOST": "0.0.0.0",
        "PORT": "8080",
        "WARNINGS_LIMIT": "3",
        "DEBUG": "false",
    }

    with patch.dict(os.environ, env_vars, clear=False):
        yield


@pytest.fixture
def clean_database():
    """–û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    yield
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    # –ù–∞–ø—Ä–∏–º–µ—Ä, —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –∏–ª–∏ –æ—Ç–∫–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π


@pytest.fixture
def isolation_database():
    """–ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏
    from sqlalchemy import create_engine
    from sqlalchemy.orm import sessionmaker

    engine = create_engine("sqlite:///:memory:", echo=False)
    Session = sessionmaker(bind=engine)

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    from infrastructure.database.models import Base

    Base.metadata.create_all(engine)

    session = Session()
    try:
        yield session
    finally:
        session.close()
        engine.dispose()


class AsyncContextManagerMock:
    """–ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è async context managers"""

    def __init__(self, return_value=None):
        self.return_value = return_value

    async def __aenter__(self):
        return self.return_value

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        pass


@pytest.fixture
def async_context_manager():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è async context manager –º–æ–∫–æ–≤"""
    return AsyncContextManagerMock


# –ú–∞—Ä–∫–µ—Ä—ã –¥–ª—è pytest
pytestmark = [
    pytest.mark.asyncio,
]


def pytest_configure(config):
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è pytest"""
    config.addinivalue_line("markers", "slow: marks tests as slow (deselect with '-m \"not slow\"')")
    config.addinivalue_line("markers", "integration: marks tests as integration tests")
    config.addinivalue_line("markers", "unit: marks tests as unit tests")
    config.addinivalue_line("markers", "requires_db: marks tests that require database connection")
    config.addinivalue_line("markers", "requires_network: marks tests that require network access")


def pytest_collection_modifyitems(config, items):
    """–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    for item in items:
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä unit –¥–ª—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–Ω–æ–µ
        if not any(mark.name in ["integration", "slow", "requires_db", "requires_network"] for mark in item.iter_markers()):
            item.add_marker(pytest.mark.unit)


# –•—É–∫–∏ –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def pytest_runtest_setup(item):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
    print(f"\nüöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {item.name}")


def pytest_runtest_teardown(item, nextitem):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω —Ç–µ—Å—Ç: {item.name}")


@pytest.fixture
def no_network_access():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–µ—Ç–µ–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –≤ —Ç–µ—Å—Ç–∞—Ö"""
    import socket

    def guard(*args, **kwargs):
        raise Exception("Network access blocked in tests")

    with patch.object(socket, "socket", guard):
        yield
