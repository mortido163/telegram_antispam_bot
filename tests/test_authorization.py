"""
–¢–µ—Å—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞
"""
from unittest.mock import AsyncMock, Mock, patch

import pytest

from application.settings import AuthConfig
from interfaces.telegram.decorators import admin_only, chat_admin_only, get_user_role, is_user_authorized, owner_only


@pytest.fixture
def mock_config():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –º–æ–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    with patch("interfaces.telegram.decorators.get_config") as mock_get_config:
        mock_config = Mock()
        mock_config.auth.owner_id = 123
        mock_config.auth.admin_ids = [456, 789]
        mock_get_config.return_value = mock_config
        yield mock_config


@pytest.fixture
def mock_message():
    """–§–∏–∫—Å—Ç—É—Ä–∞ –¥–ª—è –º–æ–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram"""
    message = Mock()
    message.from_user.id = 999888777
    message.chat.id = -100123456789
    message.reply = AsyncMock()
    message.bot.get_chat_member = AsyncMock()
    return message


class TestAuthorizationDecorators:
    """–¢–µ—Å—Ç—ã –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""

    @pytest.mark.asyncio
    async def test_owner_only_success(self, mock_config, mock_message):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞"""
        mock_message.from_user.id = 123  # Owner ID (—Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å mock_config)

        @owner_only
        async def test_command(self, message):
            return "success"

        # –°–æ–∑–¥–∞–µ–º mock –æ–±—ä–µ–∫—Ç self
        mock_self = Mock()
        result = await test_command(mock_self, mock_message)

        assert result == "success"
        mock_message.reply.assert_not_called()

    @pytest.mark.asyncio
    async def test_owner_only_denied(self, mock_config, mock_message):
        """–¢–µ—Å—Ç –æ—Ç–∫–∞–∑–∞ –≤ –¥–æ—Å—Ç—É–ø–µ –Ω–µ-–≤–ª–∞–¥–µ–ª—å—Ü—É"""
        mock_message.from_user.id = 999888777  # Not owner

        @owner_only
        async def test_command(self, message):
            return "success"

        mock_self = Mock()
        result = await test_command(mock_self, mock_message)

        assert result is None
        mock_message.reply.assert_called_once_with("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞.")

    @pytest.mark.asyncio
    async def test_admin_only_owner_access(self, mock_config, mock_message):
        """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫ –∞–¥–º–∏–Ω—Å–∫–∏–º –∫–æ–º–∞–Ω–¥–∞–º"""
        mock_message.from_user.id = 123  # Owner ID (—Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å mock_config)

        @admin_only
        async def test_command(self, message):
            return "success"

        mock_self = Mock()
        result = await test_command(mock_self, mock_message)

        assert result == "success"
        mock_message.reply.assert_not_called()

    @pytest.mark.asyncio
    async def test_admin_only_admin_access(self, mock_config, mock_message):
        """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫ –∞–¥–º–∏–Ω—Å–∫–∏–º –∫–æ–º–∞–Ω–¥–∞–º"""
        mock_message.from_user.id = 456  # Admin ID (—Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å mock_config)

        @admin_only
        async def test_command(self, message):
            return "success"

        mock_self = Mock()
        result = await test_command(mock_self, mock_message)

        assert result == "success"
        mock_message.reply.assert_not_called()

    @pytest.mark.asyncio
    async def test_admin_only_denied(self, mock_config, mock_message):
        """–¢–µ—Å—Ç –æ—Ç–∫–∞–∑–∞ –≤ –¥–æ—Å—Ç—É–ø–µ –æ–±—ã—á–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        mock_message.from_user.id = 999888777  # Regular user

        @admin_only
        async def test_command(self, message):
            return "success"

        mock_self = Mock()
        result = await test_command(mock_self, mock_message)

        assert result is None
        mock_message.reply.assert_called_once_with("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –±–æ—Ç–∞.")

    @pytest.mark.asyncio
    async def test_chat_admin_only_chat_admin_access(self, mock_config, mock_message):
        """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–∞—Ç–∞"""
        mock_message.from_user.id = 999888777  # Regular user but chat admin

        # –ú–æ–∫ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–∞—Ç–∞
        chat_member = Mock()
        chat_member.status = "administrator"
        mock_message.bot.get_chat_member.return_value = chat_member

        @chat_admin_only
        async def test_command(self, message):
            return "success"

        mock_self = Mock()
        result = await test_command(mock_self, mock_message)

        assert result == "success"
        mock_message.reply.assert_not_called()
        mock_message.bot.get_chat_member.assert_called_once_with(
            chat_id=mock_message.chat.id, user_id=mock_message.from_user.id
        )

    @pytest.mark.asyncio
    async def test_chat_admin_only_creator_access(self, mock_config, mock_message):
        """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—è —á–∞—Ç–∞"""
        mock_message.from_user.id = 999888777  # Regular user but chat creator

        # –ú–æ–∫ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è —á–∞—Ç–∞
        chat_member = Mock()
        chat_member.status = "creator"
        mock_message.bot.get_chat_member.return_value = chat_member

        @chat_admin_only
        async def test_command(self, message):
            return "success"

        mock_self = Mock()
        result = await test_command(mock_self, mock_message)

        assert result == "success"
        mock_message.reply.assert_not_called()

    @pytest.mark.asyncio
    async def test_chat_admin_only_denied(self, mock_config, mock_message):
        """–¢–µ—Å—Ç –æ—Ç–∫–∞–∑–∞ –≤ –¥–æ—Å—Ç—É–ø–µ –æ–±—ã—á–Ω–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É —á–∞—Ç–∞"""
        mock_message.from_user.id = 999888777  # Regular user

        # –ú–æ–∫ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        chat_member = Mock()
        chat_member.status = "member"
        mock_message.bot.get_chat_member.return_value = chat_member

        @chat_admin_only
        async def test_command(self, message):
            return "success"

        mock_self = Mock()
        result = await test_command(mock_self, mock_message)

        assert result is None
        mock_message.reply.assert_called_once_with("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞.")


class TestAuthorizationHelpers:
    """–¢–µ—Å—Ç—ã –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""

    @pytest.mark.asyncio
    async def test_is_user_authorized_owner(self, mock_config):
        """–¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞"""
        result = await is_user_authorized(123, "owner")  # Owner ID = 123
        assert result is True

        result = await is_user_authorized(123, "admin")
        assert result is True

        result = await is_user_authorized(123, "chat_admin")
        assert result is True

    @pytest.mark.asyncio
    async def test_is_user_authorized_admin(self, mock_config):
        """–¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        result = await is_user_authorized(456, "owner")  # Admin ID = 456
        assert result is False

        result = await is_user_authorized(456, "admin")
        assert result is True

        result = await is_user_authorized(456, "chat_admin")
        assert result is True

    @pytest.mark.asyncio
    async def test_is_user_authorized_chat_admin(self, mock_config):
        """–¢–µ—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–∞—Ç–∞"""
        mock_bot = Mock()
        chat_member = Mock()
        chat_member.status = "administrator"
        mock_bot.get_chat_member = AsyncMock(return_value=chat_member)

        result = await is_user_authorized(999, "chat_admin", chat_id=-100123456789, bot=mock_bot)
        assert result is True

        # –û–±—ã—á–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫
        chat_member.status = "member"
        result = await is_user_authorized(999, "chat_admin", chat_id=-100123456789, bot=mock_bot)
        assert result is False

    def test_get_user_role(self, mock_config):
        """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        assert get_user_role(123) == "owner"  # Owner ID = 123
        assert get_user_role(456) == "admin"  # Admin ID = 456
        assert get_user_role(789) == "admin"  # Admin ID = 789
        assert get_user_role(999) == "user"  # Regular user


@pytest.mark.asyncio
async def test_chat_member_api_error_handling(mock_config, mock_message):
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ API Telegram –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –≤ —á–∞—Ç–µ"""
    mock_message.from_user.id = 999888777  # Regular user
    mock_message.bot.get_chat_member.side_effect = Exception("API Error")

    @chat_admin_only
    async def test_command(self, message):
        return "success"

    mock_self = Mock()
    result = await test_command(mock_self, mock_message)

    assert result is None
    mock_message.reply.assert_called_once_with("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –≤ —á–∞—Ç–µ.")


if __name__ == "__main__":
    pytest.main([__file__])
